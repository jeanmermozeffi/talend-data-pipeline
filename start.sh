#!/bin/bash

# D√©finition des fichiers Docker Compose
declare -A COMPOSE_FILES
COMPOSE_FILES=(
    ["kafka"]="docker-compose.kafka.yml"
    ["main"]="docker-compose.yml"
    ["spark"]="docker-compose.spark.yml"
    ["airflow"]="docker-compose.airflow.yml"
)

declare -A COMPOSE_DEPENDENCIES
COMPOSE_DEPENDENCIES=(
    ["kafka"]="docker-compose.kafka.yml"
    ["main"]="docker-compose.yml docker-compose.kafka.yml"  # On ajoute kafka √† main
    ["spark"]="docker-compose.spark.yml"
    ["airflow"]="docker-compose.airflow.yml"
)

# V√©rifier si le r√©seau existe, sinon le cr√©er
docker network ls | grep -q "cic-shared-network" || docker network create cic-shared-network

# Fonction pour afficher l'usage du script
usage() {
    echo "Usage: $0 {start|stop|restart|status|logs|prune|list|rm|help} [fichier/service]"
    echo "  start [fichier/service]   - D√©marrer un fichier compose ou un service sp√©cifique sans arr√™ter les autres"
    echo "  stop [fichier/service]    - Arr√™ter un fichier compose ou un service sp√©cifique"
    echo "  restart [fichier/service] - Red√©marrer un fichier compose ou un service sp√©cifique"
    echo "  status                    - Voir les services en cours d'ex√©cution"
    echo "  logs [service]            - Voir les logs des services en temps r√©el"
    echo "  prune                     - Supprimer les conteneurs, volumes et r√©seaux inutilis√©s"
    echo "  list                      - Lister les fichiers Docker Compose disponibles"
    echo "  rm [fichier/service/all]  - Supprimer les volumes d'un fichier, d'un service ou tous les volumes"
    echo "  help                      - Afficher la liste des commandes disponibles"
    echo "\nüìÇ Alias des fichiers Docker Compose disponibles :"
    for key in "${!COMPOSE_FILES[@]}"; do
        echo "  - $key : ${COMPOSE_FILES[$key]}"
    done
    exit 1
}

# V√©rifier qu'un argument est pass√©
if [ -z "$1" ]; then
    usage
fi

# V√©rifier si un alias de fichier docker-compose est utilis√©
get_compose_files() {
    local alias="$1"
    echo "${COMPOSE_DEPENDENCIES[$alias]}"
}

# Ex√©cuter une action (start, stop, restart) sur un fichier compose ou un service
execute_action() {
    local action="$1"
    local target="$2"

    # V√©rifier si le target est un fichier docker-compose alias
    compose_files=$(get_compose_files "$target")

    if [ -n "$compose_files" ]; then
        case "$action" in
            start)
                echo "üöÄ D√©marrage des fichiers compose: $compose_files sans arr√™ter les services en cours..."
                docker compose $(echo $compose_files | sed 's/ / -f /g' | sed 's/^/-f /') up -d --no-recreate
                ;;
            stop)
                echo "üõë Arr√™t des fichiers compose: $compose_files..."
                docker compose $(echo $compose_files | sed 's/ / -f /g' | sed 's/^/-f /') down
                ;;
            restart)
                echo "üîÑ Red√©marrage des fichiers compose: $compose_files..."
                docker compose $(echo $compose_files | sed 's/ / -f /g' | sed 's/^/-f /') down
                docker compose $(echo $compose_files | sed 's/ / -f /g' | sed 's/^/-f /') up -d --no-recreate
                ;;
            *)
                usage
                ;;
        esac
    else
        # Sinon, traiter comme un service individuel
        case "$action" in
            start)
                echo "üöÄ V√©rification du service: $target..."
                if ! docker ps --format "{{.Names}}" | grep -q "^$target$"; then
                    echo "üöÄ D√©marrage du service: $target..."
                    docker start "$target"
                else
                    echo "‚úÖ Le service $target est d√©j√† en cours d'ex√©cution."
                fi
                ;;
            stop)
                echo "üõë Arr√™t du service: $target..."
                docker stop "$target"
                ;;
            restart)
                echo "üîÑ Red√©marrage du service: $target..."
                docker restart "$target"
                ;;
            *)
                usage
                ;;
        esac
    fi
}

# Supprimer les volumes
delete_volumes() {
    local target="$1"
    if [ "$target" == "all" ]; then
        echo "‚ö†Ô∏è Suppression de tous les volumes Docker..."
        docker volume prune -f
    elif [[ -n "${COMPOSE_FILES[$target]}" ]]; then
        echo "‚ö†Ô∏è Suppression des volumes du fichier compose: ${COMPOSE_FILES[$target]}..."
        docker compose -f ${COMPOSE_FILES[$target]} down -v
    else
        echo "‚ö†Ô∏è Suppression des volumes du service: $target..."
        docker rm -v $(docker ps -a -q --filter "name=$target")
    fi
    echo "‚úÖ Suppression termin√©e."
}

case "$1" in
    start|stop|restart)
        execute_action "$1" "$2"
        ;;

    status)
        echo "üìä √âtat des services en cours d'ex√©cution..."
        docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
        ;;

    logs)
        if [ -z "$2" ]; then
            usage
        fi
        echo "üìú Affichage des logs pour le service: $2..."
        docker logs -f "$2"
        ;;

    prune)
        echo "‚ö†Ô∏è Suppression des conteneurs et volumes inutilis√©s..."
        docker system prune -a -f --volumes
        echo "‚úÖ Nettoyage termin√©."
        ;;

    list)
        echo "üìÇ Fichiers Docker Compose disponibles :"
        for key in "${!COMPOSE_FILES[@]}"; do
            echo "  - $key : ${COMPOSE_FILES[$key]}"
        done
        ;;

    rm)
        if [ -z "$2" ]; then
            usage
        fi
        delete_volumes "$2"
        ;;

    help)
        usage
        ;;

    *)
        usage
        ;;
esac
